name: Build and Release Executables

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v0.2.1, v1.0.0

jobs:
  build:
    name: Build on ${{ matrix.os_name }}
    runs-on: ${{ matrix.os_platform }}
    strategy:
      matrix:
        include:
          - os_name: windows
            os_platform: windows-latest
            asset_file_name: kpi_cee-windows # Base name for the final asset
            pyinstaller_output: kpi_cee\\\\kpi_cee.exe # Path to exe in onedir
            package_cmd: Compress-Archive -Path dist/kpi_cee -DestinationPath kpi_cee-windows.zip
            packaged_asset: kpi_cee-windows.zip
            shell_type: powershell
          - os_name: macos
            os_platform: macos-latest # This is typically x86_64, runs on M1/M2 via Rosetta 2
            asset_file_name: kpi_cee-macos
            pyinstaller_output: kpi_cee/kpi_cee # App bundle or executable in folder
            package_cmd: zip -r kpi_cee-macos.zip dist/kpi_cee 
            packaged_asset: kpi_cee-macos.zip
            shell_type: bash
          - os_name: linux
            os_platform: ubuntu-latest
            asset_file_name: kpi_cee-linux
            pyinstaller_output: kpi_cee/kpi_cee # Executable in folder
            package_cmd: tar -czvf kpi_cee-linux.tar.gz -C dist kpi_cee
            packaged_asset: kpi_cee-linux.tar.gz
            shell_type: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' # Match your project's Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # PyInstaller is already in requirements.txt

    - name: Build with PyInstaller
      run: >-
        pyinstaller --name kpi_cee
        --onedir
        --noconsole
        --add-data "templates${{ runner.os == 'Windows' && ';' || ':' }}templates"
        --add-data "static${{ runner.os == 'Windows' && ';' || ':' }}static"
        app.py

    - name: Package executable
      run: ${{ matrix.package_cmd }}

    - name: Upload distributable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_file_name }} # e.g., kpi_cee-windows-v0.3.0
        path: ${{ matrix.packaged_asset }} # e.g., kpi_cee-windows.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # Run after all build jobs are successful
    permissions:
      contents: write # Required for gh release create/upload

    steps:
    - name: Checkout code # Needed for gh to know the repo, and for release notes if local
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # Download all artifacts to a directory named 'artifacts'

    - name: List downloaded artifacts (for debugging)
      run: ls -R artifacts

    - name: Create Release Notes and Upload Assets with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ github.ref_name }}
      run: |
        # Create release notes file
        cat > release_notes.md << 'EOF'
        ## Release ${{ github.ref_name }}

        Automated release for KPI CEE version ${{ github.ref_name }}.

        Download the executable for your operating system below.

        ### How to Run:

        **Windows:**
        1. Download `kpi_cee-windows.zip`.
        2. Extract the archive.
        3. Double-click `kpi_cee.exe`. Your browser should open automatically.

        **macOS (Intel/Rosetta 2):**
        1. Download `kpi_cee-macos.zip`.
        2. Extract the archive. Navigate to the folder.
        3. Make it executable: `chmod +x kpi_cee/kpi_cee`
        4. Run: `./kpi_cee/kpi_cee`. Your browser should open.

        **Linux:**
        1. Download `kpi_cee-linux.tar.gz`.
        2. Extract: `tar -xzvf kpi_cee-linux.tar.gz`.
        3. Make executable: `chmod +x kpi_cee/kpi_cee`
        4. Run: `./kpi_cee/kpi_cee`. Your browser should open.
        EOF

        # Find and upload all artifacts
        find artifacts -name "*.zip" -o -name "*.tar.gz" | while read -r file; do
          echo "Found: $file"
        done

        # Create release and upload files
        gh release create ${TAG} \
          --title "Release ${TAG}" \
          --notes-file release_notes.md \
          artifacts/*/*.zip \
          artifacts/*/*.tar.gz 